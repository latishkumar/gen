{{define "dao_gorm_getall.go.tmpl"}}
// GetAll{{.StructName}} is a function to get a slice of record(s) from {{.TableName}} table in the {{.DatabaseName}} database
// params - page     - page requested (defaults to 0)
// params - pagesize - number of records in a page  (defaults to 20)
// params - order    - db sort order column
// error - ErrNotFound, db Find error
func GetAll{{.StructName}}(ctx context.Context, filter map[string][]string,  page, pagesize int64, order string) (results []*{{.modelPackageName}}.{{.StructName}}, totalRows int, err error) {

	// get the model reference

	model := {{.modelPackageName}}.{{.StructName}}{}

	// get corresponding table info

	cols := model.TableInfo().Columns

	fmt.Printf("Cols: %v \n", cols)
	
	resultOrm := DB.Model(&model)

	// appy the filter condition

	whereCondition, whereValues, err := GetFilterConditionsAndValues(filter, cols)

	if err != nil {

		fmt.Printf("ERROR in parsing the filter condition: %v \n", err)
	}

	fmt.Printf("wherevalues: %v \n", whereValues)

	resultOrm = resultOrm.Where(whereCondition, whereValues)


    resultOrm.Count(&totalRows)
	
	if page > 0 {
		offset := (page - 1) * pagesize
		resultOrm = resultOrm.Offset(offset).Limit(pagesize)
	} else {
		resultOrm = resultOrm.Limit(pagesize)
    }

	// translate order parameter to db column name

	if order != "" {

		orderCriteria := strings.Split(order," ")
		
		for _, col := range cols {

			if col.JSONFieldName == orderCriteria[0] {

				fmt.Printf("FOUND db column name for order paramter")

				orderCriteria[0] = col.GoFieldName

				break

			}
		}

		resultOrm = resultOrm.Order(strings.Join(orderCriteria," "))
	}

	if err = resultOrm.Find(&results).Error; err != nil {
	    err = ErrNotFound
		return nil, -1, err
	}

	return results, totalRows, nil
}
{{end}}
